#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// регистр ОсновныеНачисления
	Движения.ВКМ_ОсновныеНачисления.Записывать = Истина;
	
	// регистр ДополнительныеНачисления
	Движения.ВКМ_ДополнительныеНачисления.Записывать = Истина; 
	
	// регистр ДополнительныеНачисления
	Движения.ВКМ_Удержания.Записывать = Истина;
	
	ВКМ_СформироватьДвижения();
	
	ВКМ_РассчитатьОклад(); 
	ВКМ_РассчитьтьОтпуск();
	ВКМ_РассчитатьУдержания();
		
	ВКМ_ДвиженияВзаиморасчетыССотрудниками();	
	
КонецПроцедуры 

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Стр Из Начисления Цикл
        Если Стр.ДатаНачала > Стр.ДатаОкончания ИЛИ Месяц(Стр.ДатаНачала) <> Месяц(Стр.ДатаОкончания) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Строка №%1 не верно задон период!!!", Стр.НомерСтроки)); 
            Отказ = Истина; 
		КонецЕсли;
		
		Если Стр.ВидРасчета = ПланыВидовРасчета.ВКМ_ДополнительныеНачисления.Премия Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Строка №%1 не верный вид расчета. Премия начисляется отдельным документом!!!", Стр.НомерСтроки));
            Отказ = Истина;
		КонецЕсли; 
		
		Если Месяц(Стр.ДатаНачала) <> Месяц(Дата) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Строка №%1 месяц документа не равен месяцу начала начислению!!!", Стр.НомерСтроки));
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;  
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ВКМ_СформироватьДвижения();
	
	ВКМ_СформироватьДвиженияУдержания();
	
	ВКМ_СформироватьДвиженияПоОкладу();
	
	ВКМ_СформироватьДвиженияПрочиеОсновныеНачисления();  
	
	ВКМ_СформироватьДвиженияДополнительныеНачиления();  
	
	ВКМ_ДвиженияГрафикиОтпусков();
	
	Движения.ВКМ_ОсновныеНачисления.Записать();
	
	Движения.ВКМ_ДополнительныеНачисления.Записать();
	
	Движения.ВКМ_Удержания.Записать(); 
	
	Движения.ВКМ_Удержания.Записать();
	
КонецПроцедуры 
 
Процедура ВКМ_СформироватьДвиженияУдержания()	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВКМ_НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.ВКМ_НачислениеЗарплаты.Начисления КАК ВКМ_НачислениеЗарплатыНачисления
		|ГДЕ
		|	ВКМ_НачислениеЗарплатыНачисления.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = Движения.ВКМ_Удержания.Добавить();
		Движение.ПериодРегистрации = Дата;
		Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ13;
		Движение.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник;
		Движение.БазовыйПериодНачало = НачалоМесяца(Дата);
		Движение.БазовыйПериодКонец = КонецМесяца(Дата);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВКМ_СформироватьДвиженияПоОкладу(); 
	
	 Отбор = Новый Структура();
	 Отбор.Вставить("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад); 
	 
	 СтрокиОклада = Начисления.НайтиСтроки(Отбор);
	 
	 Если СтрокиОклада.Количество() = 0 Тогда
		 Возврат;
	 КонецЕсли;
	 
	МинимальнаяДатаНачала = СтрокиОклада[0].ДатаНачала;
	МаксимальнаяДатаОкончания = СтрокиОклада[0].ДатаОкончания;
	
	Для Сч = 1 по СтрокиОклада.Количество() - 1 Цикл
		
		Если МинимальнаяДатаНачала > СтрокиОклада[Сч].ДатаНачала Тогда
			МинимальнаяДатаНачала = СтрокиОклада[Сч].ДатаНачала;
		КонецЕсли;
		
		Если МаксимальнаяДатаОкончания < СтрокиОклада[Сч].ДатаОкончания Тогда
			МаксимальнаяДатаОкончания = СтрокиОклада[Сч].ДатаОкончания;
		КонецЕсли;
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник,
		|	ВКМ_НачислениеЗарплатыНачисления.ВидРасчета КАК ВидРасчета,
		|	ВКМ_НачислениеЗарплатыНачисления.ДатаНачала КАК ДатаНачала,
		|	ВКМ_НачислениеЗарплатыНачисления.ДатаОкончания КАК ДатаОкончания,
		|	ВКМ_НачислениеЗарплатыНачисления.ГрафикРаботы КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТ_ПериодыОкладаИсходные
		|ИЗ
		|	Документ.ВКМ_НачислениеЗарплаты.Начисления КАК ВКМ_НачислениеЗарплатыНачисления
		|ГДЕ
		|	ВКМ_НачислениеЗарплатыНачисления.Ссылка = &Ссылка
		|	И ВКМ_НачислениеЗарплатыНачисления.ВидРасчета = &Оклад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Период КАК Период,
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад КАК Оклад
		|ПОМЕСТИТЬ ВТ_ИзмененияОклада
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(
		|			&МинимальнаяДатаНачала,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ВТ_ПериодыОкладаИсходные.Сотрудник КАК Сотрудник
		|				ИЗ
		|					ВТ_ПериодыОкладаИсходные КАК ВТ_ПериодыОкладаИсходные)) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудников.Период,
		|	ВКМ_УсловияОплатыСотрудников.Сотрудник,
		|	ВКМ_УсловияОплатыСотрудников.Оклад
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников КАК ВКМ_УсловияОплатыСотрудников
		|ГДЕ
		|	ВКМ_УсловияОплатыСотрудников.Период > &МинимальнаяДатаНачала
		|	И ВКМ_УсловияОплатыСотрудников.Период <= &МаксимальнаяДатаОкончания
		|	И ВКМ_УсловияОплатыСотрудников.Сотрудник В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_ПериодыОкладаИсходные.Сотрудник КАК Сотрудник
		|			ИЗ
		|				ВТ_ПериодыОкладаИсходные КАК ВТ_ПериодыОкладаИсходные)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатаНачала.Период КАК ДатаНачала,
		|	ДатаНачала.Сотрудник КАК Сотрудник,
		|	ДатаНачала.Оклад КАК Оклад,
		|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ДатаОкончания.Период, СЕКУНДА, -1), ДАТАВРЕМЯ(3999, 12, 31))) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ИнтервалОклада
		|ИЗ
		|	ВТ_ИзмененияОклада КАК ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИзмененияОклада КАК ДатаОкончания
		|		ПО ДатаНачала.Сотрудник = ДатаОкончания.Сотрудник
		|			И ДатаНачала.Период < ДатаОкончания.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатаНачала.Оклад,
		|	ДатаНачала.Период,
		|	ДатаНачала.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыОкладаИсходные.Сотрудник КАК Сотрудник,
		|	ВТ_ПериодыОкладаИсходные.ВидРасчета КАК ВидРасчета,
		|	ВТ_ПериодыОкладаИсходные.ГрафикРаботы КАК ГрафикРаботы,
		|	ВТ_ИнтервалОклада.Оклад КАК Показатель,
		|	ВЫБОР
		|		КОГДА ВТ_ИнтервалОклада.ДатаНачала > ВТ_ПериодыОкладаИсходные.ДатаНачала
		|			ТОГДА ВТ_ИнтервалОклада.ДатаНачала
		|		ИНАЧЕ ВТ_ПериодыОкладаИсходные.ДатаНачала
		|	КОНЕЦ КАК ПериодДействияНачало,
		|	ВЫБОР
		|		КОГДА ВТ_ИнтервалОклада.ДатаОкончания < ВТ_ПериодыОкладаИсходные.ДатаОкончания
		|			ТОГДА ВТ_ИнтервалОклада.ДатаОкончания
		|		ИНАЧЕ ВТ_ПериодыОкладаИсходные.ДатаОкончания
		|	КОНЕЦ КАК ПериодДействияКонец
		|ИЗ
		|	ВТ_ПериодыОкладаИсходные КАК ВТ_ПериодыОкладаИсходные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИнтервалОклада КАК ВТ_ИнтервалОклада
		|		ПО ВТ_ПериодыОкладаИсходные.Сотрудник = ВТ_ИнтервалОклада.Сотрудник
		|			И (ВТ_ИнтервалОклада.ДатаНачала <= ВТ_ПериодыОкладаИсходные.ДатаОкончания)
		|			И ВТ_ПериодыОкладаИсходные.ДатаНачала <= ВТ_ИнтервалОклада.ДатаОкончания";
	
	Запрос.УстановитьПараметр("МаксимальнаяДатаОкончания", МаксимальнаяДатаОкончания);
	Запрос.УстановитьПараметр("МинимальнаяДатаНачала", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("Оклад", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
		Движение.ПериодРегистрации = Дата;
	
	КонецЦикла;
	
КонецПроцедуры  

Процедура ВКМ_СформироватьДвиженияПрочиеОсновныеНачисления();
	
	Для Каждого Строка Из Начисления Цикл    
		
		Если ТипЗнч(Строка.ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.ВКМ_ОсновныеНачисления") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		Движение.ПериодРегистрации = Дата;
		Движение.ВидРасчета = Строка.ВидРасчета;
		Движение.ПериодДействияНачало = Строка.ДатаНачала;
		Движение.ПериодДействияКонец = Строка.ДатаОкончания;
		Движение.Сотрудник = Строка.Сотрудник;
		Движение.ГрафикРаботы = Строка.ГрафикРаботы; 
		
		Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда
			Движение.БазовыйПериодНачало = НачалоМесяца(ДобавитьМесяц(Строка.ДатаНачала, -12));
			Движение.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(Строка.ДатаОкончания, -1)); 	
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры   

Процедура ВКМ_СформироватьДвиженияДополнительныеНачиления();
	
	Отбор = Новый Структура();
	Отбор.Вставить("ВидРасчета", ПланыВидовРасчета.ВКМ_ДополнительныеНачисления.ПроцентОтРабот); 
	
	СтрокиПроцентОтРабот = Начисления.НайтиСтроки(Отбор);
	
	Если СтрокиПроцентОтРабот.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МинимальнаяДатаНачала = СтрокиПроцентОтРабот[0].ДатаНачала;
	МаксимальнаяДатаОкончания = СтрокиПроцентОтРабот[0].ДатаОкончания;
	
	Для Сч = 1 по СтрокиПроцентОтРабот.Количество() - 1 Цикл
		
		Если МинимальнаяДатаНачала > СтрокиПроцентОтРабот[Сч].ДатаНачала Тогда
			МинимальнаяДатаНачала = СтрокиПроцентОтРабот[Сч].ДатаНачала;
		КонецЕсли;
		
		Если МаксимальнаяДатаОкончания < СтрокиПроцентОтРабот[Сч].ДатаОкончания Тогда
			МаксимальнаяДатаОкончания = СтрокиПроцентОтРабот[Сч].ДатаОкончания;
		КонецЕсли;
		
	КонецЦикла;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВКМ_НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник,
		|	ВКМ_НачислениеЗарплатыНачисления.ВидРасчета КАК ВидРасчета,
		|	ВКМ_НачислениеЗарплатыНачисления.ДатаНачала КАК ДатаНачала,
		|	ВКМ_НачислениеЗарплатыНачисления.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_Док
		|ИЗ
		|	Документ.ВКМ_НачислениеЗарплаты.Начисления КАК ВКМ_НачислениеЗарплатыНачисления
		|ГДЕ
		|	ВКМ_НачислениеЗарплатыНачисления.Ссылка = &Ссылка
		|	И ВКМ_НачислениеЗарплатыНачисления.ВидРасчета = &ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Док.Сотрудник КАК Сотрудник,
		|	ВТ_Док.ВидРасчета КАК ВидРасчета,
		|	ВТ_Док.ДатаНачала КАК ПериодДействияНачало,
		|	ВТ_Док.ДатаОкончания КАК ПериодДействияКонец,
		|	ВКМ_ВыполненныеСотрудникомРаботыОбороты.СуммаКОплатеОборот КАК Результат
		|ИЗ
		|	ВТ_Док КАК ВТ_Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВыполненныеСотрудникомРаботы.Обороты(
		|				&ДатаНачала,
		|				&ДатаОкончания,
		|				,
		|				Сотрудник В
		|					(ВЫБРАТЬ
		|						ВТ_Док.Сотрудник КАК Сотрудник
		|					ИЗ
		|						ВТ_Док КАК ВТ_Док)) КАК ВКМ_ВыполненныеСотрудникомРаботыОбороты
		|		ПО ВТ_Док.Сотрудник = ВКМ_ВыполненныеСотрудникомРаботыОбороты.Сотрудник";
	
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ВКМ_ДополнительныеНачисления.ПроцентОтРабот);
	Запрос.УстановитьПараметр("ДатаНачала", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", МаксимальнаяДатаОкончания);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = Движения.ВКМ_ДополнительныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаДетальныеЗаписи);
		Движение.ПериодРегистрации = Дата;
	КонецЦикла;	
	Движения.ВКМ_ДополнительныеНачисления.Записать();

КонецПроцедуры 

Процедура ВКМ_РассчитатьОклад();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК Факт,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеПериодДействия, 0) КАК Норма
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
		|			ВидРасчета = &Оклад
		|				И Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияДанныеГрафика";
	
	Запрос.УстановитьПараметр("Оклад", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		
		Если ВыборкаДетальныеЗаписи.Норма = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю("Не заполнен график работ!!! Не возможно проведение!!!");
			Отказ = Истина; 
			Прервать;
		КонецЕсли;
		
		Движение = Движения.ВКМ_ОсновныеНачисления[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
		Движение.Результат = Движение.Показатель / ВыборкаДетальныеЗаписи.Норма * ВыборкаДетальныеЗаписи.Факт;
		Движение.ОтработаноЧасов = ВыборкаДетальныеЗаписи.Факт;	 	 
		
	КонецЦикла;   
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
	
КонецПроцедуры

Процедура ВКМ_РассчитьтьОтпуск();    
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления.РезультатБаза, 0) КАК БазаДоп,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.РезультатБаза, 0) КАК БазаОсн,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ОтработаноЧасовБаза, 0) КАК БазаОтработано,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК Факт
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ДополнительныеНачисления(
		|				&Измерения,
		|				&Измерения,
		|				,
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ДополнительныеНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
		|				Регистратор = &Ссылка
		|					И ВидРасчета = &Отпуск) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
		|		ПО ВКМ_ОсновныеНачисления.НомерСтроки = ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Ссылка
		|	И ВКМ_ОсновныеНачисления.ВидРасчета = &Отпуск";  
	
	Измерения = Новый Массив; 
	Измерения.Добавить("Сотрудник");
	
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДвижениеОтпуск = Движения.ВКМ_ОсновныеНачисления[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
		ДвижениеОтпуск.ОтработаноЧасов = ВыборкаДетальныеЗаписи.Факт; 
		
		Если ВыборкаДетальныеЗаписи.БазаОтработано = 0 Тогда
			ДвижениеОтпуск.Результат = 0;
			Продолжить;
		КонецЕсли;  
		
		ДвижениеОтпуск.Результат = (ВыборкаДетальныеЗаписи.БазаОсн + ВыборкаДетальныеЗаписи.БазаДоп) / ВыборкаДетальныеЗаписи.БазаОтработано * ВыборкаДетальныеЗаписи.Факт;
		ДвижениеОтпуск.Показатель = (ВыборкаДетальныеЗаписи.БазаОсн + ВыборкаДетальныеЗаписи.БазаДоп)/12; 
		
		
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);

КонецПроцедуры 

Процедура ВКМ_РассчитатьУдержания(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_Удержания.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления.РезультатБаза, 0) КАК ДопНачисления
	|ПОМЕСТИТЬ ВТ_Дополнительно
	|ИЗ
	|	РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_Удержания.БазаВКМ_ДополнительныеНачисления(
	|				&Измерения,
	|				&Измерения,
	|				&Разрезы,
	|				Регистратор = &Ссылка
	|					И ВидРасчета = &НДФЛ) КАК ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления
	|		ПО ВКМ_Удержания.НомерСтроки = ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления.НомерСтроки
	|ГДЕ
	|	ВКМ_Удержания.Регистратор = &Ссылка
	|	И ВКМ_Удержания.ВидРасчета = &НДФЛ
	|	И ТИПЗНАЧЕНИЯ(ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления.РегистраторРазрез) <> ТИП(Документ.ВКМ_НачислениеФиксированнойПремии)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВКМ_Удержания.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.РезультатБаза, 0) КАК ОснНачисления
	|ПОМЕСТИТЬ ВТ_Основные
	|ИЗ
	|	РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_Удержания.БазаВКМ_ОсновныеНачисления(
	|				&Измерения,
	|				&Измерения,
	|				&Разрезы,
	|				Регистратор = &Ссылка
	|					И ВидРасчета = &НДФЛ) КАК ВКМ_УдержанияБазаВКМ_ОсновныеНачисления
	|		ПО ВКМ_Удержания.НомерСтроки = ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.НомерСтроки
	|ГДЕ
	|	ВКМ_Удержания.Регистратор = &Ссылка
	|	И ВКМ_Удержания.ВидРасчета = &НДФЛ
	|	И ВКМ_УдержанияБазаВКМ_ОсновныеНачисления.РегистраторРазрез = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Основные.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВТ_Основные.ОснНачисления, 0) КАК ОснНачисления,
	|	ЕСТЬNULL(ВТ_Дополнительно.ДопНачисления, 0) КАК ДопНачисления
	|ИЗ
	|	ВТ_Основные КАК ВТ_Основные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Дополнительно КАК ВТ_Дополнительно
	|		ПО ВТ_Основные.НомерСтроки = ВТ_Дополнительно.НомерСтроки" ;
	
	
	Измерения = Новый Массив; 
	Измерения.Добавить("Сотрудник"); 
	
	Разрезы = Новый Массив;
	Разрезы.Добавить("Регистратор");
	
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	Запрос.УстановитьПараметр("НДФЛ", ПланыВидовРасчета.ВКМ_Удержания.НДФЛ13); 
	Запрос.УстановитьПараметр("Разрезы", Разрезы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		
		Движение = Движения.ВКМ_Удержания[ВыборкаДетальныеЗаписи.НомерСтроки - 1];	
		Движение.Результат = (ВыборкаДетальныеЗаписи.ОснНачисления + ВыборкаДетальныеЗаписи.ДопНачисления)/100*13;
		Движение.Показатель = ВыборкаДетальныеЗаписи.ОснНачисления + ВыборкаДетальныеЗаписи.ДопНачисления;
		
	КонецЦикла;  
	Движения.ВКМ_Удержания.Записать();
	
КонецПроцедуры

Процедура ВКМ_ДвиженияВзаиморасчетыССотрудниками()
	
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВКМ_НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	Документ.ВКМ_НачислениеЗарплаты.Начисления КАК ВКМ_НачислениеЗарплатыНачисления
	|ГДЕ
	|	ВКМ_НачислениеЗарплатыНачисления.Ссылка = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВКМ_ОсновныеНачисления.Результат) КАК ОснНачисления,
	|	ВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТ_ОснНачисления
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
	|ГДЕ
	|	ВКМ_ОсновныеНачисления.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_ОсновныеНачисления.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВКМ_ДополнительныеНачисления.Сотрудник КАК Сотрудник,
	|	СУММА(ВКМ_ДополнительныеНачисления.Результат) КАК ДопНачисления
	|ПОМЕСТИТЬ ВТ_ДопНачисления
	|ИЗ
	|	РегистрРасчета.ВКМ_ДополнительныеНачисления КАК ВКМ_ДополнительныеНачисления
	|ГДЕ
	|	ВКМ_ДополнительныеНачисления.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_ДополнительныеНачисления.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВКМ_Удержания.Сотрудник КАК Сотрудник,
	|	СУММА(ВКМ_Удержания.Результат) КАК Удержания
	|ПОМЕСТИТЬ ВТ_Удержания
	|ИЗ
	|	РегистрРасчета.ВКМ_Удержания КАК ВКМ_Удержания
	|ГДЕ
	|	ВКМ_Удержания.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_Удержания.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сотрудники.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(ВТ_ДопНачисления.ДопНачисления, 0) КАК ДопНачисления,
	|	ЕСТЬNULL(ВТ_ОснНачисления.ОснНачисления, 0) КАК ОснНачисления,
	|	ЕСТЬNULL(ВТ_Удержания.Удержания, 0) КАК Удержания
	|ИЗ
	|	ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДопНачисления КАК ВТ_ДопНачисления
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_ДопНачисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОснНачисления КАК ВТ_ОснНачисления
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_ОснНачисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Удержания КАК ВТ_Удержания
	|		ПО ВТ_Сотрудники.Сотрудник = ВТ_Удержания.Сотрудник"; 
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи =  РезультатЗапроса.Выбрать(); 
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить(); 
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход; 
		Движение.Период = Дата;  
		Движение.Сотрудник = ВыборкаДетальныеЗаписи.Сотрудник; 
		Движение.Сумма = ВыборкаДетальныеЗаписи.ОснНачисления + ВыборкаДетальныеЗаписи.ДопНачисления - ВыборкаДетальныеЗаписи.Удержания;    //   
		 
	КонецЦикла;
	
КонецПроцедуры

Процедура ВКМ_ДвиженияГрафикиОтпусков() 
	
	Движения.ВКМ_ГрафикиОтпусков.Очистить();
	Движения.ВКМ_ГрафикиОтпусков.Записать();
	Движения.ВКМ_ГрафикиОтпусков.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник,
		|	ВКМ_НачислениеЗарплатыНачисления.ДатаНачала КАК ДатаНачала,
		|	ВКМ_НачислениеЗарплатыНачисления.ДатаОкончания КАК ДатаОкончания,
		|	РАЗНОСТЬДАТ(ВКМ_НачислениеЗарплатыНачисления.ДатаНачала, ВКМ_НачислениеЗарплатыНачисления.ДатаОкончания, ДЕНЬ) + 1 КАК КолвоДней
		|ИЗ
		|	Документ.ВКМ_НачислениеЗарплаты.Начисления КАК ВКМ_НачислениеЗарплатыНачисления
		|ГДЕ
		|	ВКМ_НачислениеЗарплатыНачисления.Ссылка = &Ссылка
		|	И ВКМ_НачислениеЗарплатыНачисления.ВидРасчета = &ВидРасчета";
	
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ВКМ_ГрафикиОтпусков.Добавить(); 
		Движение.Период = Выборка.ДатаОкончания;
		Движение.Сотрудник = Выборка.Сотрудник;
		Движение.ДатаНачало = Выборка.ДатаНачала;
		Движение.ДатаОкончания = Выборка.ДатаОкончания;
		Движение.Значение = Выборка.КолвоДней;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
	

  
	
